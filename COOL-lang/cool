#!/bin/bash

############################
#
# Compile helper script for COOL,
# the Classroom Object Oriented Language
#
# This script automates a number of tasks:
# - Compiling COOL programs
# - Running COOL programs
# - Cleaning up the messy output from the COOL executor
#
# To run a COOL program with this script, pass the source code file as a paramter
# Alternate syntax: You can also run the program without the .cl extension.
# For example, to run 'test.cl', you may run either:
#   $ cool test
#   $ cool test.cl
#
# Written by Ben Yanke
# https://github.com/benyanke
#
# Last modified on February 1, 2017
#
############################
#
# LICENSE
#
# Copyright (c) 2017 Ben Yanke.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
############################


############################
# Settings
############################

# Change these if you need to.

# Path to compiler
compile="/usr/local/bin/coolc"

# Path to execution enviromnet
execute="/usr/local/bin/322spim"

############################
# Input Processing
############################

# Get filename from argument
inRaw=$1

# if file exists, continue normally
if [ -f "$inRaw" ]; then

	inSrc=$inRaw

	# Remove the '.cl' from the end of the input and
	# replace with '.s' to obtain the name of the compiled executable

	noExt="${inRaw%.*}"

	inBin=$noExt.s


# If file is not found, but $inRaw.cl is,
# switch to that silently and continue
elif [ ! -f "$inRaw" ] && [ -f "$inRaw.cl" ]; then

	inSrc=$1.cl
	inBin=$1.s


## else, file does not exist
else

	echo ;
	echo "FATAL ERROR: '$inRaw' does not exist";
	echo ;
	exit 1;


fi


############################
# File State Error Checking
############################

# check for blank argument
if [ $# -eq 0 ]; then
	echo ;
	echo "FATAL ERROR: No input file specified.";
	echo ;
	exit 1;
fi

# echo $inSrc;

## Check for file readability
if [ ! -r "$inSrc" ]; then
	echo ;
	echo "FATAL ERROR: '$inSrc' is not readable.";
	echo ;
	exit 1;
fi


## Check for file size > 0
if [ ! -s "$inSrc" ]; then
	echo ;
	echo "FATAL ERROR: '$inSrc' is blank.";
	echo ;
	exit 1;
fi



###########
# MAIN Section
###########

# Remove existing binary, if it exists
if [ -f "$inBin" ]; then
	rm "$inBin" -f;
fi

# Newline
echo ;

# Compile source to binary - exit with error if it fails;
$compile "$inSrc" || exit 1;


# Run program - remove header and footer from program run to make more readable
$execute -file "$inBin"  | tail -n+6  | head -c-36

# Newline
echo ;

# Exit with a success code
exit 0;
